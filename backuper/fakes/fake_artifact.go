// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"

	"github.com/pivotal-cf/pcf-backup-and-restore/backuper"
)

type FakeArtifact struct {
	CreateFileStub        func(backuper.Instance) (io.WriteCloser, error)
	createFileMutex       sync.RWMutex
	createFileArgsForCall []struct {
		arg1 backuper.Instance
	}
	createFileReturns struct {
		result1 io.WriteCloser
		result2 error
	}
	AddChecksumStub        func(backuper.Instance, string) error
	addChecksumMutex       sync.RWMutex
	addChecksumArgsForCall []struct {
		arg1 backuper.Instance
		arg2 string
	}
	addChecksumReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArtifact) CreateFile(arg1 backuper.Instance) (io.WriteCloser, error) {
	fake.createFileMutex.Lock()
	fake.createFileArgsForCall = append(fake.createFileArgsForCall, struct {
		arg1 backuper.Instance
	}{arg1})
	fake.recordInvocation("CreateFile", []interface{}{arg1})
	fake.createFileMutex.Unlock()
	if fake.CreateFileStub != nil {
		return fake.CreateFileStub(arg1)
	} else {
		return fake.createFileReturns.result1, fake.createFileReturns.result2
	}
}

func (fake *FakeArtifact) CreateFileCallCount() int {
	fake.createFileMutex.RLock()
	defer fake.createFileMutex.RUnlock()
	return len(fake.createFileArgsForCall)
}

func (fake *FakeArtifact) CreateFileArgsForCall(i int) backuper.Instance {
	fake.createFileMutex.RLock()
	defer fake.createFileMutex.RUnlock()
	return fake.createFileArgsForCall[i].arg1
}

func (fake *FakeArtifact) CreateFileReturns(result1 io.WriteCloser, result2 error) {
	fake.CreateFileStub = nil
	fake.createFileReturns = struct {
		result1 io.WriteCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeArtifact) AddChecksum(arg1 backuper.Instance, arg2 string) error {
	fake.addChecksumMutex.Lock()
	fake.addChecksumArgsForCall = append(fake.addChecksumArgsForCall, struct {
		arg1 backuper.Instance
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AddChecksum", []interface{}{arg1, arg2})
	fake.addChecksumMutex.Unlock()
	if fake.AddChecksumStub != nil {
		return fake.AddChecksumStub(arg1, arg2)
	} else {
		return fake.addChecksumReturns.result1
	}
}

func (fake *FakeArtifact) AddChecksumCallCount() int {
	fake.addChecksumMutex.RLock()
	defer fake.addChecksumMutex.RUnlock()
	return len(fake.addChecksumArgsForCall)
}

func (fake *FakeArtifact) AddChecksumArgsForCall(i int) (backuper.Instance, string) {
	fake.addChecksumMutex.RLock()
	defer fake.addChecksumMutex.RUnlock()
	return fake.addChecksumArgsForCall[i].arg1, fake.addChecksumArgsForCall[i].arg2
}

func (fake *FakeArtifact) AddChecksumReturns(result1 error) {
	fake.AddChecksumStub = nil
	fake.addChecksumReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArtifact) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createFileMutex.RLock()
	defer fake.createFileMutex.RUnlock()
	fake.addChecksumMutex.RLock()
	defer fake.addChecksumMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeArtifact) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ backuper.Artifact = new(FakeArtifact)

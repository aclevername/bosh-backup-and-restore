// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/bosh-backup-and-restore/executor"
	"github.com/cloudfoundry-incubator/bosh-backup-and-restore/orchestrator"
)

type FakeDeployment struct {
	IsBackupableStub        func() bool
	isBackupableMutex       sync.RWMutex
	isBackupableArgsForCall []struct{}
	isBackupableReturns     struct {
		result1 bool
	}
	isBackupableReturnsOnCall map[int]struct {
		result1 bool
	}
	BackupableInstancesStub        func() []orchestrator.Instance
	backupableInstancesMutex       sync.RWMutex
	backupableInstancesArgsForCall []struct{}
	backupableInstancesReturns     struct {
		result1 []orchestrator.Instance
	}
	backupableInstancesReturnsOnCall map[int]struct {
		result1 []orchestrator.Instance
	}
	PreBackupLockStub        func(orchestrator.LockOrderer, executor.Executor) error
	preBackupLockMutex       sync.RWMutex
	preBackupLockArgsForCall []struct {
		arg1 orchestrator.LockOrderer
		arg2 executor.Executor
	}
	preBackupLockReturns struct {
		result1 error
	}
	preBackupLockReturnsOnCall map[int]struct {
		result1 error
	}
	PostBackupUnlockStub        func(orchestrator.LockOrderer, executor.Executor) error
	postBackupUnlockMutex       sync.RWMutex
	postBackupUnlockArgsForCall []struct {
		arg1 orchestrator.LockOrderer
		arg2 executor.Executor
	}
	postBackupUnlockReturns struct {
		result1 error
	}
	postBackupUnlockReturnsOnCall map[int]struct {
		result1 error
	}
	InstancesStub        func() []orchestrator.Instance
	instancesMutex       sync.RWMutex
	instancesArgsForCall []struct{}
	instancesReturns     struct {
		result1 []orchestrator.Instance
	}
	instancesReturnsOnCall map[int]struct {
		result1 []orchestrator.Instance
	}
	ValidateLockingDependenciesStub        func(orderer orchestrator.LockOrderer) error
	validateLockingDependenciesMutex       sync.RWMutex
	validateLockingDependenciesArgsForCall []struct {
		orderer orchestrator.LockOrderer
	}
	validateLockingDependenciesReturns struct {
		result1 error
	}
	validateLockingDependenciesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeployment) IsBackupable() bool {
	fake.isBackupableMutex.Lock()
	ret, specificReturn := fake.isBackupableReturnsOnCall[len(fake.isBackupableArgsForCall)]
	fake.isBackupableArgsForCall = append(fake.isBackupableArgsForCall, struct{}{})
	fake.recordInvocation("IsBackupable", []interface{}{})
	fake.isBackupableMutex.Unlock()
	if fake.IsBackupableStub != nil {
		return fake.IsBackupableStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.isBackupableReturns.result1
}

func (fake *FakeDeployment) IsBackupableCallCount() int {
	fake.isBackupableMutex.RLock()
	defer fake.isBackupableMutex.RUnlock()
	return len(fake.isBackupableArgsForCall)
}

func (fake *FakeDeployment) IsBackupableReturns(result1 bool) {
	fake.IsBackupableStub = nil
	fake.isBackupableReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDeployment) IsBackupableReturnsOnCall(i int, result1 bool) {
	fake.IsBackupableStub = nil
	if fake.isBackupableReturnsOnCall == nil {
		fake.isBackupableReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isBackupableReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeDeployment) BackupableInstances() []orchestrator.Instance {
	fake.backupableInstancesMutex.Lock()
	ret, specificReturn := fake.backupableInstancesReturnsOnCall[len(fake.backupableInstancesArgsForCall)]
	fake.backupableInstancesArgsForCall = append(fake.backupableInstancesArgsForCall, struct{}{})
	fake.recordInvocation("BackupableInstances", []interface{}{})
	fake.backupableInstancesMutex.Unlock()
	if fake.BackupableInstancesStub != nil {
		return fake.BackupableInstancesStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.backupableInstancesReturns.result1
}

func (fake *FakeDeployment) BackupableInstancesCallCount() int {
	fake.backupableInstancesMutex.RLock()
	defer fake.backupableInstancesMutex.RUnlock()
	return len(fake.backupableInstancesArgsForCall)
}

func (fake *FakeDeployment) BackupableInstancesReturns(result1 []orchestrator.Instance) {
	fake.BackupableInstancesStub = nil
	fake.backupableInstancesReturns = struct {
		result1 []orchestrator.Instance
	}{result1}
}

func (fake *FakeDeployment) BackupableInstancesReturnsOnCall(i int, result1 []orchestrator.Instance) {
	fake.BackupableInstancesStub = nil
	if fake.backupableInstancesReturnsOnCall == nil {
		fake.backupableInstancesReturnsOnCall = make(map[int]struct {
			result1 []orchestrator.Instance
		})
	}
	fake.backupableInstancesReturnsOnCall[i] = struct {
		result1 []orchestrator.Instance
	}{result1}
}

func (fake *FakeDeployment) PreBackupLock(arg1 orchestrator.LockOrderer, arg2 executor.Executor) error {
	fake.preBackupLockMutex.Lock()
	ret, specificReturn := fake.preBackupLockReturnsOnCall[len(fake.preBackupLockArgsForCall)]
	fake.preBackupLockArgsForCall = append(fake.preBackupLockArgsForCall, struct {
		arg1 orchestrator.LockOrderer
		arg2 executor.Executor
	}{arg1, arg2})
	fake.recordInvocation("PreBackupLock", []interface{}{arg1, arg2})
	fake.preBackupLockMutex.Unlock()
	if fake.PreBackupLockStub != nil {
		return fake.PreBackupLockStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.preBackupLockReturns.result1
}

func (fake *FakeDeployment) PreBackupLockCallCount() int {
	fake.preBackupLockMutex.RLock()
	defer fake.preBackupLockMutex.RUnlock()
	return len(fake.preBackupLockArgsForCall)
}

func (fake *FakeDeployment) PreBackupLockArgsForCall(i int) (orchestrator.LockOrderer, executor.Executor) {
	fake.preBackupLockMutex.RLock()
	defer fake.preBackupLockMutex.RUnlock()
	return fake.preBackupLockArgsForCall[i].arg1, fake.preBackupLockArgsForCall[i].arg2
}

func (fake *FakeDeployment) PreBackupLockReturns(result1 error) {
	fake.PreBackupLockStub = nil
	fake.preBackupLockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeployment) PreBackupLockReturnsOnCall(i int, result1 error) {
	fake.PreBackupLockStub = nil
	if fake.preBackupLockReturnsOnCall == nil {
		fake.preBackupLockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.preBackupLockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeployment) PostBackupUnlock(arg1 orchestrator.LockOrderer, arg2 executor.Executor) error {
	fake.postBackupUnlockMutex.Lock()
	ret, specificReturn := fake.postBackupUnlockReturnsOnCall[len(fake.postBackupUnlockArgsForCall)]
	fake.postBackupUnlockArgsForCall = append(fake.postBackupUnlockArgsForCall, struct {
		arg1 orchestrator.LockOrderer
		arg2 executor.Executor
	}{arg1, arg2})
	fake.recordInvocation("PostBackupUnlock", []interface{}{arg1, arg2})
	fake.postBackupUnlockMutex.Unlock()
	if fake.PostBackupUnlockStub != nil {
		return fake.PostBackupUnlockStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.postBackupUnlockReturns.result1
}

func (fake *FakeDeployment) PostBackupUnlockCallCount() int {
	fake.postBackupUnlockMutex.RLock()
	defer fake.postBackupUnlockMutex.RUnlock()
	return len(fake.postBackupUnlockArgsForCall)
}

func (fake *FakeDeployment) PostBackupUnlockArgsForCall(i int) (orchestrator.LockOrderer, executor.Executor) {
	fake.postBackupUnlockMutex.RLock()
	defer fake.postBackupUnlockMutex.RUnlock()
	return fake.postBackupUnlockArgsForCall[i].arg1, fake.postBackupUnlockArgsForCall[i].arg2
}

func (fake *FakeDeployment) PostBackupUnlockReturns(result1 error) {
	fake.PostBackupUnlockStub = nil
	fake.postBackupUnlockReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeployment) PostBackupUnlockReturnsOnCall(i int, result1 error) {
	fake.PostBackupUnlockStub = nil
	if fake.postBackupUnlockReturnsOnCall == nil {
		fake.postBackupUnlockReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.postBackupUnlockReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeployment) Instances() []orchestrator.Instance {
	fake.instancesMutex.Lock()
	ret, specificReturn := fake.instancesReturnsOnCall[len(fake.instancesArgsForCall)]
	fake.instancesArgsForCall = append(fake.instancesArgsForCall, struct{}{})
	fake.recordInvocation("Instances", []interface{}{})
	fake.instancesMutex.Unlock()
	if fake.InstancesStub != nil {
		return fake.InstancesStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.instancesReturns.result1
}

func (fake *FakeDeployment) InstancesCallCount() int {
	fake.instancesMutex.RLock()
	defer fake.instancesMutex.RUnlock()
	return len(fake.instancesArgsForCall)
}

func (fake *FakeDeployment) InstancesReturns(result1 []orchestrator.Instance) {
	fake.InstancesStub = nil
	fake.instancesReturns = struct {
		result1 []orchestrator.Instance
	}{result1}
}

func (fake *FakeDeployment) InstancesReturnsOnCall(i int, result1 []orchestrator.Instance) {
	fake.InstancesStub = nil
	if fake.instancesReturnsOnCall == nil {
		fake.instancesReturnsOnCall = make(map[int]struct {
			result1 []orchestrator.Instance
		})
	}
	fake.instancesReturnsOnCall[i] = struct {
		result1 []orchestrator.Instance
	}{result1}
}

func (fake *FakeDeployment) ValidateLockingDependencies(orderer orchestrator.LockOrderer) error {
	fake.validateLockingDependenciesMutex.Lock()
	ret, specificReturn := fake.validateLockingDependenciesReturnsOnCall[len(fake.validateLockingDependenciesArgsForCall)]
	fake.validateLockingDependenciesArgsForCall = append(fake.validateLockingDependenciesArgsForCall, struct {
		orderer orchestrator.LockOrderer
	}{orderer})
	fake.recordInvocation("ValidateLockingDependencies", []interface{}{orderer})
	fake.validateLockingDependenciesMutex.Unlock()
	if fake.ValidateLockingDependenciesStub != nil {
		return fake.ValidateLockingDependenciesStub(orderer)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.validateLockingDependenciesReturns.result1
}

func (fake *FakeDeployment) ValidateLockingDependenciesCallCount() int {
	fake.validateLockingDependenciesMutex.RLock()
	defer fake.validateLockingDependenciesMutex.RUnlock()
	return len(fake.validateLockingDependenciesArgsForCall)
}

func (fake *FakeDeployment) ValidateLockingDependenciesArgsForCall(i int) orchestrator.LockOrderer {
	fake.validateLockingDependenciesMutex.RLock()
	defer fake.validateLockingDependenciesMutex.RUnlock()
	return fake.validateLockingDependenciesArgsForCall[i].orderer
}

func (fake *FakeDeployment) ValidateLockingDependenciesReturns(result1 error) {
	fake.ValidateLockingDependenciesStub = nil
	fake.validateLockingDependenciesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeployment) ValidateLockingDependenciesReturnsOnCall(i int, result1 error) {
	fake.ValidateLockingDependenciesStub = nil
	if fake.validateLockingDependenciesReturnsOnCall == nil {
		fake.validateLockingDependenciesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateLockingDependenciesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDeployment) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isBackupableMutex.RLock()
	defer fake.isBackupableMutex.RUnlock()
	fake.backupableInstancesMutex.RLock()
	defer fake.backupableInstancesMutex.RUnlock()
	fake.preBackupLockMutex.RLock()
	defer fake.preBackupLockMutex.RUnlock()
	fake.postBackupUnlockMutex.RLock()
	defer fake.postBackupUnlockMutex.RUnlock()
	fake.instancesMutex.RLock()
	defer fake.instancesMutex.RUnlock()
	fake.validateLockingDependenciesMutex.RLock()
	defer fake.validateLockingDependenciesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDeployment) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ orchestrator.Deployment = new(FakeDeployment)

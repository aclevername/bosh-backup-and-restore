// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/bosh-backup-and-restore/orchestrator"
)

type FakeDeploymentManager struct {
	FindStub        func(deploymentName string) (orchestrator.Deployment, error)
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		deploymentName string
	}
	findReturns struct {
		result1 orchestrator.Deployment
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDeploymentManager) Find(deploymentName string) (orchestrator.Deployment, error) {
	fake.findMutex.Lock()
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		deploymentName string
	}{deploymentName})
	fake.recordInvocation("Find", []interface{}{deploymentName})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(deploymentName)
	}
	return fake.findReturns.result1, fake.findReturns.result2
}

func (fake *FakeDeploymentManager) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeDeploymentManager) FindArgsForCall(i int) string {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].deploymentName
}

func (fake *FakeDeploymentManager) FindReturns(result1 orchestrator.Deployment, result2 error) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 orchestrator.Deployment
		result2 error
	}{result1, result2}
}

func (fake *FakeDeploymentManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDeploymentManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ orchestrator.DeploymentManager = new(FakeDeploymentManager)
